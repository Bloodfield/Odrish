#!/bin/bash

#   Useful bash scripts for the odrive agent
#   odr
#   By	Bloodfield

##	TODO
#	cd *.cloudf
#	to eng
#	targueted refresh 

#   variables
shopt -s expand_aliases
comando=$1
source ~/.Odrish/config

#	HELP
if [[ $comando == "help" ]]
	then
	printf "ord allows you to manage your local data in the Odrive-Cli files
	Developer: Bloodfield
	In each of the following Commands, it is explained the operation, arguments and use of them:
		help
			Gives help menu
			Does not use arguments
			$ odr help 
		auth
			Sets up an authenticate key
			uses only the key
			$ odr auth 00000000-0000-0000-0000-000000000000-00000000
		init
			Initializes the client
			Does not use arguments
			$ odr init
			[Is not needed if you had configured ~/.config/systemd/user/odrive.service]
		shutdown
			Closes the client
			Does not use arguments
			$ odr shutdown
			[Is not needed if you had configured ~/.config/systemd/user/odrive.service]
		status
			Shows the general status
			$ odr status [args]
			args:
				-h, --help       show this help message and exit
				--mounts         get status on mounts
				--backups        get status on backup jobs
				--sync_requests  get status on sync requests
				--uploads        get status on uploads
				--downloads      get status on downloads
				--background     get status on background requests
				--trash          get status of trash items
				--waiting        get status of waiting items
				--not_allowed    get status of not allowed items
		mount
			sets a local directory with a cloud directory
			the local directory is in the computer, do not use back tracked files
			the odrive directory has / as the root for all the services in the cloud
			$ odr mount /home/user/odrive /
		lsmount
			shows where the directory is mounted
			$ odr lsmount
		unmount
			removes the mounted directory
			$ odr unmount
		refresh
			Makes refresh in the file or folder
			r
				Recursive refreshing synced files
			s
				Recursive refreshing synced files and handlers
			$ odr refresh [r | s] [folderpath]
		sync
			sync placeholder
			r
				Recursive sync in case of a folder
			placeholder or folder
			$ odr sync [r] [placeholder | folder ]
		cd
			[refreshes / syncs] a [file/file handler] then ges into int
			folder
			$ odr cd [folder]
		rm
			deletes a file or folder, both locally and in the cloud
			file or folder
			$ odr rm [file | folder]
	"	
	exit
fi

#	Sets up an authentication key 
if [[ $comando == "auth" ]]
	then
	odrive authenticate $2
	exit
fi

#	Starts service if not configured as automatic
if [[ $comando == "init" ]]
	then
	nohup "$HOME/.odrive-agent/bin/odriveagent" > /dev/null 2>&1 &
	exit
fi

#	Stop service
if [[ $comando == "shutdown" ]]
	then
	odrive shutdown
	exit
fi

#	Status and configs

if [[ $comando == "status" ]]
	then
	odrive status $2
	cat ~/.Odrish/config
	echo Targets:
	cat ~/.Odrish/target
	exit
fi


#	Mount directory
if [[ $comando == "mount" ]]
	then
	if [ ! -d "$2" ]; then
		echo "Directory $2 does not exist"
		exit
	fi
	
	#	check if there is something mounted exit
	if [[ ! -z "$mountdir" ]]; then
		echo "Already mounted:"
		echo $mountdir
		exit
	fi
	
	#	Add mounting directory
	
	dir=""
	if [[ ${2:0:1} == "/" ]] ;
	then 
	dir=$2
	else
	dir="$PWD/$2"
	fi
	
	echo "alias mountdir=\"$dir\"" >> ~/.Odrish/config
	
	if [[ $# -gt 2 ]]; then
		odrive mount $dir $3
	else
		odrive mount $dir /
	fi
	
	exit
fi

#	List mounted
if [[ $comando == "lsmount" ]]
	then
	echo $mountdir
	exit
fi

#	Unmount directory
if [[ $comando == "unmount" ]]
	then
	if [ -z "$mountdir" ]; then
		#	when there is mount point
		odrive unmount $mountdir
		sed -i '/^mountdir.*$/d' ~/.Odrish/config
	fi
	exit
fi

#	Empty trash
if [[ $comando == "emptytrash" ]]
	then
	odrive emptytrash
	exit
fi

#	Refresh
if [[ $comando == "refresh" ]]
	then
	if [[ $2 == "r" ]]
		then
		argumento="r"
		directorio=$3
	else
		argumento=" "
		directorio=$2
	fi
	
	if [ ! -e "$directorio" ]
		then
		echo "Err : refresh : $directorio does not exist"
		exit
	fi

	#   refresh main dir
	if [[ $directorio =~ .*\.cloud$ ]]
		then
		echo "$directorio is not a directory or .cloudf file"
		exit
	fi

	if [[ $directorio =~ .*\.cloudf ]]
		then
		odrive sync "$directorio"
		while [[ $(odrive syncstate "$directorio") =~ 'Active.*' ]]; do
			sleep 2
		done
		directorio=$(echo $directorio | sed 's/\(.*\)\.cloudf/\1/')
	fi
	odrive refresh "$directorio"
	while [[ $(odrive syncstate "$directorio") =~ 'Active.*' ]]; do
		sleep 2
	done

	
	
	#   recursive refresh of all folders including handlers
	if [[ $argumento == "r" ]]
	then 
		archivos=($(ls -l "$directorio" | grep "^d" | tr -s " " | cut -d" " -f9-  | tr " " ¬))
		if [[ ! -z "$archivos" ]]; then
		for i in "${archivos[@]}"
		do
			echo $(echo $i | tr ¬ " ")
			odr refresh r "$directorio/$(echo $i | tr ¬ " ")"
		done
		fi
		
	fi
	exit
fi

#	Sync
if [[ $comando == "sync" ]]
	then
	if [[ $2 == "r" ]]
		then
		argumento="r"
		directorio=$3
	else
		argumento=" "
		directorio=$2
	fi
	
	if [ ! -e "$directorio" ]
		then
		echo "Err : sync : $directorio does not exist"
		exit
	fi

	#   refresh

	if [[ $directorio =~ .*\.cloud$ ]]
		then
		odrive sync "$directorio"
		while [[ $(odrive syncstate "$directorio") =~ 'Active.*' ]]; do
			sleep 2
		done
		exit
	elif [[ $directorio =~ .*\.cloudf ]]
		then
		odrive sync "$directorio"
		while [[ $(odrive syncstate "$directorio") =~ 'Active.*' ]]; do
			sleep 2
		done
		directorio=$(echo $directorio | sed 's/\(.*\)\.cloudf/\1/')
	elif [ -d "$directorio" ]
		then
		odrive refresh "$directorio"
		while [[ $(odrive syncstate "$directorio") =~ 'Active.*' ]]; do
			sleep 2
		done	
	else
		echo "Wrong tipe of file or directory"
		exit
	fi

	#   recursive sync
	if [[ $argumento == "r" ]]
	then 
	
		archivos=($(ls -l "$directorio"| grep "^d" | tr -s " " | cut -d" " -f9-  | tr " " ¬))
		if [[ ! -z "$archivos" ]]; then
		for i in "${archivos[@]}"
		do
			echo $(echo $i | tr ¬ " ")
			odr sync r "$directorio/$(echo $i | tr ¬ " ")"
		done
		fi

		archivos=($(ls -l "$directorio" | grep "cloud[f]*$" | tr -s " " | cut -d" " -f9-  | tr " " ¬))
		if [[ ! -z "$archivos" ]]; then
		for i in "${archivos[@]}"
		do
			echo $(echo $i | tr ¬ " ")
			odr sync r "$directorio/$(echo $i | tr ¬ " ")"
		done
		fi
		
		#	Reportar problemas en el log
		archivos=($(find $directorio -iname '*cloud*' ))
		if [[ ! -z "$archivos" ]]; then
			date >> ~/.Odrish/Log
			echo sync failed for: >> ~/.Odrish/Log
			echo $archivos >> ~/.Odrish/Log
		fi
	fi

	exit
fi

#	Syncn't

#	odrivish cd
if [[ $comando == "cd" ]]
	then
	
	#check if file exist
	if [ -d "$2" ]
	then

		odrive refresh "$2"
		while [[ $(odrive syncstate '$2') =~ 'Active.*' ]]; do
		sleep 2
		done
		cd "$2"
		$SHELL
		exit

	fi

	#	If is a cloud file
	if [[  "$2" == *.cloudf ]]
	then

		odrive sync "$2"
		while [[ $(odrive syncstate "$2") =~ 'Active.*' ]]; do
			sleep 2
		done
		directorio="${2%.*}"
		cd "$directorio"
		$SHELL
		exit

	fi
	echo "Err : odr cd : $2 no es un directorio o no existe"
	exit
fi

#	odrivish rm
if [[ $comando == "rm" ]]
	then

	#	verify the file exists
	if [ ! -e "$2" ]
		then
		echo "$2 no xiste"
		exit
	fi
	
	#   remove
	rm -R $2

	#	refresh local
	odrive refresh .
	while [[ $(odrive syncstate "$2") =~ 'Active.*' ]]; do
		sleep 2
	done

	#	emptytrash
	odrive emptytrash
	while [[ $(odrive status | grep Trash: | cut -f2 -d" " ) -eq '0' ]]; do
		sleep 2
	done

	exit
fi

#	target
if [[ $comando == "target" ]]
	then

	if [ $2 == "add" ]; then
		if [ ! -d "$3" ]; then
		echo "Directory $3 does not exist"
		exit
		fi
		echo $3 >> ~/.Odrish/target
		exit
	fi

	if [ $2 == "rm" ]; then
		if [ ! -d "$3" ]; then
		echo "Directory $3 does not exist"
		exit
		fi
		sed -i "\:${3}:d" ~/.Odrish/target
		exit
	fi

	if [ $2 == "ls" ]; then
		cat ~/.Odrish/target
		exit
	fi

	if [ $2 == "sync" ]; then
		while IFS="" read -r p || [ -n "$p" ]
		do
			if [ ! -e "$p" ]
				then
				echo "$p no xiste"
				exit
			fi
			directorio=$(echo $p | sed 's/\([^[:alnum:]/]\)/\\\1/g')
			odr sync r "$directorio"
		done < ~/.Odrish/target
		exit
	fi

	if [ $2 == "refresh" ]; then
		while IFS="" read -r p || [ -n "$p" ]
		do
			if [ ! -e "$p" ]
				then
				echo "$p no xiste"
				exit
			fi
# 			directorio=$(echo $p | sed 's/\([^[:alnum:]/]\)/\\\1/g')
# 			odr refresh r "$directorio"
			odr refresh r "$p"
		done < ~/.Odrish/target
		exit
	fi


fi


echo " Err : Command not recognized"
odr help
